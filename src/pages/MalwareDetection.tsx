import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Bug, Shield, AlertTriangle, FileText, Trash2, Lock, Download } from "lucide-react";

interface MalwareDetection {
  id: string;
  fileName: string;
  filePath: string;
  detectionType: string;
  confidenceScore: number;
  fileSize: string;
  fileHash: string;
  timestamp: string;
  action: "Quarantined" | "Removed" | "Pending" | "Ignored";
  threatFamily: string;
  scanEngine: string;
}

const malwareDetections: MalwareDetection[] = [
  {
    id: "1",
    fileName: "invoice_document.pdf.exe",
    filePath: "C:\\Users\\John\\Downloads\\invoice_document.pdf.exe",
    detectionType: "Trojan",
    confidenceScore: 98,
    fileSize: "2.3 MB",
    fileHash: "a1b2c3d4e5f6789012345678901234567890abcd",
    timestamp: "2024-01-15 14:23:45",
    action: "Quarantined",
    threatFamily: "Trojan.GenKrypt",
    scanEngine: "Behavioral Analysis"
  },
  {
    id: "2",
    fileName: "system_update.msi",
    filePath: "C:\\Temp\\system_update.msi",
    detectionType: "Ransomware",
    confidenceScore: 95,
    fileSize: "15.7 MB",
    fileHash: "f1e2d3c4b5a69870123456789012345678901234",
    timestamp: "2024-01-15 13:45:12",
    action: "Removed",
    threatFamily: "Ransomware.Locky",
    scanEngine: "Signature Detection"
  },
  {
    id: "3",
    fileName: "chrome_extension.crx",
    filePath: "C:\\Users\\Admin\\AppData\\Local\\chrome_extension.crx",
    detectionType: "Adware",
    confidenceScore: 87,
    fileSize: "445 KB",
    fileHash: "9876543210abcdef1234567890123456789abcde",
    timestamp: "2024-01-15 12:30:33",
    action: "Pending",
    threatFamily: "Adware.SearchHijack",
    scanEngine: "Heuristic Analysis"
  },
  {
    id: "4",
    fileName: "keylogger.dll",
    filePath: "C:\\Windows\\System32\\keylogger.dll",
    detectionType: "Spyware",
    confidenceScore: 99,
    fileSize: "256 KB",
    fileHash: "abcdef1234567890123456789012345678901234",
    timestamp: "2024-01-15 11:15:21",
    action: "Quarantined",
    threatFamily: "Spyware.KeyCaptor",
    scanEngine: "Machine Learning"
  },
  {
    id: "5",
    fileName: "backdoor.py",
    filePath: "/home/user/downloads/backdoor.py",
    detectionType: "Backdoor",
    confidenceScore: 92,
    fileSize: "12 KB",
    fileHash: "1234567890abcdef1234567890abcdef12345678",
    timestamp: "2024-01-15 10:05:07",
    action: "Removed",
    threatFamily: "Backdoor.Python",
    scanEngine: "Code Analysis"
  }
];

const MalwareDetection = () => {
  const [detections, setDetections] = useState<MalwareDetection[]>(malwareDetections);
  const [selectedDetection, setSelectedDetection] = useState<MalwareDetection | null>(null);

  const quarantinedCount = detections.filter(d => d.action === "Quarantined").length;
  const removedCount = detections.filter(d => d.action === "Removed").length;
  const pendingCount = detections.filter(d => d.action === "Pending").length;
  const highRiskCount = detections.filter(d => d.confidenceScore >= 95).length;

  const handleAction = (detectionId: string, newAction: "Quarantined" | "Removed" | "Ignored") => {
    setDetections(detections.map(detection => 
      detection.id === detectionId ? { ...detection, action: newAction } : detection
    ));
  };

  const getDetectionTypeBadge = (type: string, confidence: number) => {
    const getColor = () => {
      if (confidence >= 95) return "bg-threat-high/20 text-threat-high border-threat-high/50";
      if (confidence >= 85) return "bg-threat-medium/20 text-threat-medium border-threat-medium/50";
      return "bg-threat-low/20 text-threat-low border-threat-low/50";
    };

    return (
      <Badge className={getColor()}>
        {type} ({confidence}%)
      </Badge>
    );
  };

  const getActionBadge = (action: string) => {
    switch (action) {
      case "Quarantined":
        return <Badge className="bg-threat-medium/20 text-threat-medium border-threat-medium/50">Quarantined</Badge>;
      case "Removed":
        return <Badge className="bg-safe/20 text-safe border-safe/50">Removed</Badge>;
      case "Pending":
        return <Badge variant="outline" className="border-cyber-blue/50 text-cyber-blue">Pending Review</Badge>;
      case "Ignored":
        return <Badge variant="outline">Ignored</Badge>;
      default:
        return <Badge variant="outline">{action}</Badge>;
    }
  };

  const getThreatIcon = (type: string) => {
    switch (type.toLowerCase()) {
      case "trojan":
        return <Bug className="h-4 w-4 text-threat-high" />;
      case "ransomware":
        return <Lock className="h-4 w-4 text-threat-high" />;
      case "adware":
        return <AlertTriangle className="h-4 w-4 text-threat-medium" />;
      case "spyware":
        return <AlertTriangle className="h-4 w-4 text-threat-high" />;
      case "backdoor":
        return <Shield className="h-4 w-4 text-threat-high" />;
      default:
        return <Bug className="h-4 w-4 text-threat-medium" />;
    }
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-grotesk font-bold text-foreground">Malware Detection</h1>
          <p className="text-muted-foreground">Advanced threat detection and file analysis</p>
        </div>
        <div className="flex items-center gap-4">
          <div className="text-sm text-muted-foreground">
            <span className="font-medium text-foreground">{detections.length}</span>{" "}
            threats detected today
          </div>
        </div>
      </div>

      {/* Statistics Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card className="gradient-card border-border/50">
          <CardContent className="p-4">
            <div className="flex items-center gap-3">
              <AlertTriangle className="h-8 w-8 text-threat-high" />
              <div>
                <p className="text-2xl font-grotesk font-bold text-foreground">{highRiskCount}</p>
                <p className="text-sm text-muted-foreground">High Risk</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="gradient-card border-border/50">
          <CardContent className="p-4">
            <div className="flex items-center gap-3">
              <Lock className="h-8 w-8 text-threat-medium" />
              <div>
                <p className="text-2xl font-grotesk font-bold text-foreground">{quarantinedCount}</p>
                <p className="text-sm text-muted-foreground">Quarantined</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="gradient-card border-border/50">
          <CardContent className="p-4">
            <div className="flex items-center gap-3">
              <Trash2 className="h-8 w-8 text-safe" />
              <div>
                <p className="text-2xl font-grotesk font-bold text-foreground">{removedCount}</p>
                <p className="text-sm text-muted-foreground">Removed</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="gradient-card border-border/50">
          <CardContent className="p-4">
            <div className="flex items-center gap-3">
              <FileText className="h-8 w-8 text-cyber-blue" />
              <div>
                <p className="text-2xl font-grotesk font-bold text-foreground">{pendingCount}</p>
                <p className="text-sm text-muted-foreground">Pending Review</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Malware Detection Table */}
      <Card className="gradient-card border-border/50">
        <CardHeader>
          <CardTitle className="text-foreground font-grotesk">Malware Detection Results</CardTitle>
          <CardDescription className="text-muted-foreground">
            Real-time malware scanning and threat analysis
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow className="border-border hover:bg-muted/50">
                <TableHead className="text-muted-foreground font-medium">File Name</TableHead>
                <TableHead className="text-muted-foreground font-medium">Detection Type</TableHead>
                <TableHead className="text-muted-foreground font-medium">Threat Family</TableHead>
                <TableHead className="text-muted-foreground font-medium">File Size</TableHead>
                <TableHead className="text-muted-foreground font-medium">Action</TableHead>
                <TableHead className="text-muted-foreground font-medium">Timestamp</TableHead>
                <TableHead className="text-muted-foreground font-medium">Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {detections.map((detection) => (
                <TableRow key={detection.id} className="border-border hover:bg-muted/20">
                  <TableCell>
                    <div className="flex items-center gap-2">
                      {getThreatIcon(detection.detectionType)}
                      <span className="font-medium text-foreground">{detection.fileName}</span>
                    </div>
                  </TableCell>
                  <TableCell>
                    {getDetectionTypeBadge(detection.detectionType, detection.confidenceScore)}
                  </TableCell>
                  <TableCell className="text-foreground">{detection.threatFamily}</TableCell>
                  <TableCell className="text-muted-foreground">{detection.fileSize}</TableCell>
                  <TableCell>{getActionBadge(detection.action)}</TableCell>
                  <TableCell className="text-muted-foreground">{detection.timestamp}</TableCell>
                  <TableCell className="space-x-2">
                    <Dialog>
                      <DialogTrigger asChild>
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => setSelectedDetection(detection)}
                          className="border-border hover:bg-muted"
                        >
                          Details
                        </Button>
                      </DialogTrigger>
                      <DialogContent className="max-w-3xl bg-card border-border">
                        <DialogHeader>
                          <DialogTitle className="text-foreground font-grotesk">Malware Analysis Report</DialogTitle>
                          <DialogDescription className="text-muted-foreground">
                            Detailed threat analysis and file information
                          </DialogDescription>
                        </DialogHeader>
                        {selectedDetection && (
                          <div className="space-y-4">
                            <div className="grid grid-cols-2 gap-4">
                              <div>
                                <label className="text-sm font-medium text-muted-foreground">File Name</label>
                                <p className="text-foreground font-mono">{selectedDetection.fileName}</p>
                              </div>
                              <div>
                                <label className="text-sm font-medium text-muted-foreground">Detection Type</label>
                                <div className="mt-1">
                                  {getDetectionTypeBadge(selectedDetection.detectionType, selectedDetection.confidenceScore)}
                                </div>
                              </div>
                            </div>
                            
                            <div>
                              <label className="text-sm font-medium text-muted-foreground">File Path</label>
                              <p className="text-foreground font-mono text-sm bg-muted/20 p-2 rounded">
                                {selectedDetection.filePath}
                              </p>
                            </div>

                            <div className="grid grid-cols-2 gap-4">
                              <div>
                                <label className="text-sm font-medium text-muted-foreground">Threat Family</label>
                                <p className="text-foreground">{selectedDetection.threatFamily}</p>
                              </div>
                              <div>
                                <label className="text-sm font-medium text-muted-foreground">Scan Engine</label>
                                <p className="text-foreground">{selectedDetection.scanEngine}</p>
                              </div>
                            </div>

                            <div className="grid grid-cols-2 gap-4">
                              <div>
                                <label className="text-sm font-medium text-muted-foreground">File Size</label>
                                <p className="text-foreground">{selectedDetection.fileSize}</p>
                              </div>
                              <div>
                                <label className="text-sm font-medium text-muted-foreground">Confidence Score</label>
                                <p className={`text-2xl font-bold ${
                                  selectedDetection.confidenceScore >= 95 ? 'text-threat-high' : 
                                  selectedDetection.confidenceScore >= 85 ? 'text-threat-medium' : 'text-threat-low'
                                }`}>
                                  {selectedDetection.confidenceScore}%
                                </p>
                              </div>
                            </div>

                            <div>
                              <label className="text-sm font-medium text-muted-foreground">File Hash (SHA-256)</label>
                              <div className="mt-1 p-3 bg-muted/20 rounded font-mono text-xs text-foreground break-all">
                                {selectedDetection.fileHash}
                              </div>
                            </div>

                            <div>
                              <label className="text-sm font-medium text-muted-foreground">Detection Timestamp</label>
                              <p className="text-foreground">{selectedDetection.timestamp}</p>
                            </div>

                            <div className="pt-4 border-t border-border">
                              <h4 className="font-medium text-foreground mb-2">Threat Intelligence</h4>
                              <div className="space-y-2 text-sm text-muted-foreground">
                                <p>• This file matches known malware signatures in our threat database</p>
                                <p>• Similar samples have been reported by security researchers</p>
                                <p>• File exhibits suspicious behavior patterns typical of {selectedDetection.detectionType.toLowerCase()}</p>
                                <p>• Recommended action: {selectedDetection.action === "Pending" ? "Quarantine immediately" : "Current action is appropriate"}</p>
                              </div>
                            </div>
                          </div>
                        )}
                      </DialogContent>
                    </Dialog>
                    
                    {detection.action === "Pending" && (
                      <>
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => handleAction(detection.id, "Quarantined")}
                          className="border-threat-medium/50 text-threat-medium hover:bg-threat-medium/10"
                        >
                          Quarantine
                        </Button>
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => handleAction(detection.id, "Removed")}
                          className="border-destructive/50 text-destructive hover:bg-destructive/10"
                        >
                          Remove
                        </Button>
                      </>
                    )}
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>

      {/* Real-time Protection Status */}
      <Card className="gradient-card border-border/50">
        <CardHeader>
          <CardTitle className="text-foreground font-grotesk">Protection Status</CardTitle>
          <CardDescription className="text-muted-foreground">
            Real-time malware protection and scanning status
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="flex items-center justify-between p-4 rounded-lg bg-safe/10 border border-safe/20">
              <div className="flex items-center gap-3">
                <Shield className="h-5 w-5 text-safe" />
                <div>
                  <p className="font-medium text-foreground">Real-time Protection</p>
                  <p className="text-sm text-muted-foreground">Active scanning of all file operations</p>
                </div>
              </div>
              <Badge className="bg-safe/20 text-safe border-safe/50">Active</Badge>
            </div>

            <div className="flex items-center justify-between p-4 rounded-lg bg-cyber-blue/10 border border-cyber-blue/20">
              <div className="flex items-center gap-3">
                <Download className="h-5 w-5 text-cyber-blue" />
                <div>
                  <p className="font-medium text-foreground">Signature Database</p>
                  <p className="text-sm text-muted-foreground">Last updated: 2 hours ago (v2024.01.15.002)</p>
                </div>
              </div>
              <Badge className="bg-cyber-blue/20 text-cyber-blue border-cyber-blue/50">Up to Date</Badge>
            </div>

            <div className="flex items-center justify-between p-4 rounded-lg bg-safe/10 border border-safe/20">
              <div className="flex items-center gap-3">
                <Bug className="h-5 w-5 text-safe" />
                <div>
                  <p className="font-medium text-foreground">Behavioral Analysis</p>
                  <p className="text-sm text-muted-foreground">AI-powered threat detection enabled</p>
                </div>
              </div>
              <Badge className="bg-safe/20 text-safe border-safe/50">Enabled</Badge>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default MalwareDetection;